/*function jquery(a) {
	
	var res = document.querySelectorAll(a)
	
	res.text = (b) => {
		for (var i = 0; i < res.length; i++) {
			res[i].innerText = b
		}
	}
	
	res.html = (b) => {
		for (var i = 0; i < res.length; i++) {
			res[i].innerHTML = b
		}
	}
	
	return res
}*/

function jquery(val) {
	if (val instanceof Function){
		window.onload = val;
		return;
	}
	
	var a = [];
	var chk = false;

	if (val instanceof HTMLElement) {
		a[0] = val;
		chk = true;
	} else if(val.startsWith('<')) {
		a[0] = document.createElement(val.substring(1, (val.length-1)));
		chk = true;
	} else {
		for (let el of document.querySelectorAll(val)) {
			a.push(el);
		}
	}
	
	if(a.length > 1) {
		a.html = function (html) {
			if(html) {
				for (let el of this) {
		 			el.innerHTML = html;
		 		}
				return this;
			}
			
			return this[0].innerHTML;
		};
		
		a.text = function (text) {
			if(text) {
				for (let el of this) {
		 			el.innerText = text;
		 		}
				return this;
			}
			
			var res = '';	
			for (let el of this) {
				res += el.innerText+'\n';
	 		}
			
			return res;
		};
		
		a.attr = function (name, value) {
			if (typeof (name) == 'object') {
				for (let el of this) {
					for (let key in name) {
						el.setAttribute(key, name[key]);
					}
		 		}
				return this;
			} else if (value) {
				for (let el of this) {
		 			el.setAttribute(name, value);
		 		}
				return this;
			}

			return this[0].getAttribute(name);
		};
		
		a.val = function(value) {
			if(value) {
				for (let el of this) {
		 			el.value = value;
		 		}
				return this;
			}

				return this[0].value;
		};
		
		a.append = function(obj) {
			for (let el of this) {
				for (let o of obj) {
					el.appendChild(o.cloneNode(true));
				}
	 		}
			return this;
		};
		
		a.remove = function () {
			for (let el of this) {
				el.remove();
			}
		};
		
		a.css = function (name, value) {
			if (typeof (name) == 'object') {
				for (let el of this) {
					for (let key in name) {
						el.style[key] = name[key];
					}
		 		}
				return this;
			} else if (value) {
				for (let el of this) {
					el.style[name] = value;
		 		}
				return this;
			}

			return document.defaultView.getComputedStyle(this[0]).getPropertyValue(name);
		};
		
		a.prop = function(name, value) {
			if(value != undefined) {
				for (let el of this) {
		 			el[name] = value;
		 		}
				return this;
			}
			
			return this[0][name];
		};
		
		a.on = function(name, value) {
			for (let el of this) {
	 			el.addEventListener(name, value);
	 		}
			return this;
		};
		
		a.click = function(cb) {
			return this.on('click', cb);
		};
		
		a.focus = function() {
			this[0].focus();
			return this;
		};
	} else {
		if(chk)
			a = a[0];
		else
			a = document.querySelector(val);
	 
		a.html = function (html) {
			if (html) {
				this.innerHTML = html;
				return this;
			}
			return this.innerHTML;
		};
		
		a.text = function (text) {
			if(text) {
				this.innerText = text;
				return this;
			}
			
			return this.innerText;
		};
		
		a.attr = function (name, value) {
			if (typeof (name) == 'object') {
				for (let key in name) {
					this.setAttribute(key, name[key]);
				}
				return this;
			} else if (value) {
				this.setAttribute(name, value);
				return this;
			}

			return this.getAttribute(name);
		};
		
		a.val = function(value) {
			if(value) {
				this.value = value;
				return this;
			}

			return this.value;
		};
		
		a.append = function(obj) {
			for (let o of obj) {
				this.appendChild(o);
			}
			return this;
		};
		
		/*a.remove = function () {
			a.remove();
		};*/
		
		a.css = function (name, value) {
			if (typeof (name) == 'object') {
				for (let key in name) {
					this.style[key] = name[key];
				}
				return this;
			} else if (value) {
		 		this.style[name] = value;
		 		return this;
			}

			return document.defaultView.getComputedStyle(this).getPropertyValue(name);
		};
		
		a.prop = function(name, value) {
			if(value != undefined) {
				this[name] = value;
				return this;
			}
			
			return this[name];
		};
		
		a.on = function(name, value) {
	 		this.addEventListener(name, value);
			return this;
		};
		
		a.click = function(cb) {
			return this.on('click', cb);
		};
		
		a.focus = function() {
			this.focus();
			return this;
		};
	}
	
	return a;
}

var $ = jquery;

jquery.ajax = function (obj) {
	var xhr = new XMLHttpRequest();

	xhr.onreadystatechange = function () {
		var data;

		if(xhr.readyState != 4) return;
		
		if(xhr.status == 200) {
			if (obj.dataType == 'json') {
				data = JSON.parse(xhr.responseText);
			} else if (obj.dataType == 'xml') {
				data = xhr.responseXML;
			} else {
				data = xhr.responseText;
			}
			
			obj.success(data);
		} else {
			console.log('에러');
		}
	};
	
	if (!obj.type || obj.type != 'get' && obj.type != 'post')
		obj.type = 'get';

	var d = '';
	
	if(obj.data) {
		if(typeof (obj.data) === 'string') {
			d = obj.data;
		} else {
			for (var key in obj.data) {
				if(d != '') d += '&';
				d += key+'='+obj.data[key];
			}
		} 
	}
	
	if(obj.type == 'get' && d != '') obj.url += '?'+d;
	
	xhr.open(obj.type, obj.url, true);
	
	if (obj.type == 'post') {
		xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	}
	
	xhr.send(d);
};